Write C++ program to implement Cohen Southerland line clipping algorithm. 
#include <graphics.h>
#include <iostream>

// Region codes for the endpoints
const int INSIDE = 0; // 0000
const int LEFT = 1;   // 0001
const int RIGHT = 2;  // 0010
const int BOTTOM = 4; // 0100
const int TOP = 8;    // 1000

// Define the clipping window
int xmin, ymin, xmax, ymax;

// Function to compute the region code for a point (x, y)
int computeCode(int x, int y) {
    int code = INSIDE;

    if (x < xmin)       // To the left of rectangle
        code |= LEFT;
    else if (x > xmax)  // To the right of rectangle
        code |= RIGHT;
    if (y < ymin)       // Below the rectangle
        code |= BOTTOM;
    else if (y > ymax)  // Above the rectangle
        code |= TOP;

    return code;
}

// Cohen-Sutherland line clipping algorithm
void cohenSutherlandClip(int x1, int y1, int x2, int y2) {
    // Compute region codes for both endpoints
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);
    bool accept = false;

    while (true) {
        if ((code1 == 0) && (code2 == 0)) {
            // Both endpoints are inside the rectangle
            accept = true;
            break;
        } else if (code1 & code2) {
            // Both endpoints share an outside region, trivially reject
            break;
        } else {
            // Some segment of the line lies within the rectangle
            int codeOut;
            int x, y;

            // Pick the endpoint that is outside the rectangle
            if (code1 != 0) {
                codeOut = code1;
            } else {
                codeOut = code2;
            }

            // Find the intersection point using the slope of the line
            if (codeOut & TOP) {
                x = x1 + (x2 - x1) * (ymax - y1) / (y2 - y1);
                y = ymax;
            } else if (codeOut & BOTTOM) {
                x = x1 + (x2 - x1) * (ymin - y1) / (y2 - y1);
                y = ymin;
            } else if (codeOut & RIGHT) {
                y = y1 + (y2 - y1) * (xmax - x1) / (x2 - x1);
                x = xmax;
            } else if (codeOut & LEFT) {
                y = y1 + (y2 - y1) * (xmin - x1) / (x2 - x1);
                x = xmin;
            }

            // Replace the endpoint outside the rectangle with the intersection point
            if (codeOut == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    }

    if (accept) {
        // Draw the clipped line
        setcolor(GREEN);
        line(x1, y1, x2, y2);
    }
}

int main() {
    // Initialize graphics mode
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    // Define the clipping rectangle
    xmin = 100;
    ymin = 100;
    xmax = 300;
    ymax = 300;

    // Draw the clipping rectangle
    setcolor(WHITE);
    rectangle(xmin, ymin, xmax, ymax);

    // Define a line to clip
    int x1 = 50, y1 = 150, x2 = 350, y2 = 250;

    // Draw the original line
    setcolor(RED);
    line(x1, y1, x2, y2);

    // Perform line clipping
    cohenSutherlandClip(x1, y1, x2, y2);

    // Hold the screen
    getch();

    // Close graphics mode
    closegraph();
    return 0;
}
